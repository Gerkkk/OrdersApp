version: '3'

services:
  zookeeper:
    image: bitnami/zookeeper:3.8
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes
    networks:
      - kafka-net

  kafka:
    image: bitnami/kafka:3.3
    container_name: kafka
    ports:
      - "9092:9092"
      - "29092:29092"
    environment:
      - KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper:2181
      - KAFKA_CFG_LISTENERS=PLAINTEXT://0.0.0.0:9092,EXTERNAL://0.0.0.0:29092
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092,EXTERNAL://localhost:29092
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=PLAINTEXT:PLAINTEXT,EXTERNAL:PLAINTEXT
      - KAFKA_CFG_INTER_BROKER_LISTENER_NAME=PLAINTEXT
      - KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE=true
    depends_on:
      - zookeeper
    networks:
      - kafka-net

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui
    ports:
      - "8085:8080"
    environment:
      - KAFKA_CLUSTERS_0_NAME=local
      - KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS=kafka:9092, localhost:9092, localhost:29092
    depends_on:
      - kafka
    networks:
      - kafka-net

  orders-postgres:
    image: postgres:15-alpine
    container_name: orders_db
    environment:
      POSTGRES_DB: orders_db
      POSTGRES_USER: orders
      POSTGRES_PASSWORD: orders
    volumes:
      - orders_postgres_data:/var/lib/postgresql/data
    ports:
      - "5433:5432"
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U orders -d orders_db" ]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - app-network

  accounts-postgres:
    image: postgres:15-alpine
    container_name: acc_db
    environment:
      POSTGRES_DB: acc_db
      POSTGRES_USER: acc
      POSTGRES_PASSWORD: acc
    volumes:
      - acc_postgres_data:/var/lib/postgresql/data
    ports:
      - "5434:5432"
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U acc -d acc_db" ]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - app-network

  inbox-postgres:
    image: postgres:15-alpine
    container_name: inb_db
    environment:
      POSTGRES_DB: inb_db
      POSTGRES_USER: inb
      POSTGRES_PASSWORD: inb
    volumes:
      - inb_postgres_data:/var/lib/postgresql/data
    ports:
      - "5435:5432"
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U inb -d inb_db" ]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - app-network

  outbox-postgres:
    image: postgres:15-alpine
    container_name: outb_db
    environment:
      POSTGRES_DB: outb_db
      POSTGRES_USER: outb
      POSTGRES_PASSWORD: outb
    volumes:
      - outb_postgres_data:/var/lib/postgresql/data
    ports:
      - "5436:5432"
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U outb -d outb_db" ]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - app-network

  api-gateway:
    build:
      context: ./ApiGateway
      dockerfile: Dockerfile
    ports:
      - "8081:8080"
    depends_on:
      orders-service:
        condition: service_started
      payment-service:
        condition: service_started
    restart: always
    networks:
      - app-network
  orders-service:
    container_name: orders-service
    build:
      context: ./OrdersService
      dockerfile: Dockerfile
    ports:
      - "9093:9090"
    networks:
      - app-network
  payment-service:
    container_name: payment-service
    build:
      context: ./PaymentService
      dockerfile: Dockerfile
    ports:
      - "9094:9090"
    networks:
      - app-network

networks:
  kafka-net:
    driver: bridge
  app-network:
    driver: bridge
volumes:
  orders_postgres_data:
  acc_postgres_data:
  inb_postgres_data:
  outb_postgres_data: